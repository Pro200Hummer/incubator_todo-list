{"version":3,"sources":["serviceWorker.ts","features/TodoList/Task/tasks-reducer.ts","features/Header/Header.tsx","app/hooks.ts","api/todo-list-api.ts","api/auth-api.ts","app/app-reducer.ts","utils/app-utils.ts","features/Login/auth-reducer.ts","features/Header/HeaderContainer.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/ErrorSnackbar/ErroSnackbarContainer.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoList/todolist-reducer.ts","features/TodoList/Task/Task.tsx","features/TodoList/Task/TaskContainer.tsx","features/TodoList/TodoList.tsx","features/TodoList/TodoListContainer.tsx","features/Login/Login.tsx","features/Login/LoginContainer.tsx","features/Routes.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriority","Header","React","memo","props","status","isLoggedIn","logoutClickHandler","AppBar","position","LinearProgress","color","Toolbar","IconButton","edge","aria-label","Menu","Typography","variant","Button","onClick","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","todoListApi","todoListTitle","post","title","get","todoListID","put","delete","taskTitle","taskID","updateTaskRequest","authApi","model","initializedApp","createAsyncThunk","_","a","dispatch","appSlice","actions","changeAppStatus","then","res","data","resultCode","setIsLoggedInAC","handleServerAppError","setIsInitialized","handleServerNetworkError","createSlice","name","initialState","error","isInitialized","reducers","state","action","payload","setError","errorMessage","messages","setIsLoggedIn","authSlice","err","removeLogin","message","HeaderContainer","app","auth","useDispatch","useCallback","Alert","elevation","ErrorSnackbar","isOpen","zeroingError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","ErrorSnackbarContainer","AddItemForm","useState","setTitle","addItem","trimmedTitle","trim","TextField","value","label","disabled","onChange","e","currentTarget","onKeyPress","key","onBlur","AddBox","className","EditableSpan","editMode","setEditMode","offEditMode","changeItem","autoFocus","onDoubleClick","fetchTodoLists","todoListSlice","setTodoListsAC","deleteTodoList","changeEntityStatusAC","entityStatus","removeTodoListAC","createTodoList","addTodoListAC","item","changeTodoListTitle","params","changeTodoListTitleAC","filter","tl","id","changeTodoListFilterAC","map","fetchTasks","tasks","items","taskSlice","setTasksAC","removeTask","removeTaskAC","addTask","task","addTaskAC","changeTaskStatus","changeTaskStatusAC","catch","changeTaskTitleTC","changeTaskTitleAC","todoListId","t","extraReducers","builder","addCase","forEach","Task","console","log","deleteTask","changeTaskTitle","changeStatus","taskStatus","checked","Completed","New","changeTitle","Checkbox","Delete","TaskContainer","allTasks","useEffect","taskForTodoList","removeTaskCallback","changeStatusCallback","changeTaskTitleCallback","taskObj","TodoList","todoList","disable","removeTodoList","changeTodoListFilter","addTaskForTodoList","changeFilter","dataset","data-filter","size","TodoListContainer","todoLists","changeTodoListFilterCallback","trigger","addTodoListCallback","changeTodoListTitleCallback","removeTodoListCallback","addTaskForTodoListCallback","content","Grid","Paper","style","padding","Container","fixed","container","margin","spacing","to","Login","loginHandler","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","type","FormControlLabel","control","LoginContainer","loginData","PATH","Routes","exact","path","render","from","App","top","textAlign","width","CircularProgress","store","configureStore","reducer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a11d04d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {todoListApi} from \"../../../api/todo-list-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../../app/app-reducer\";\r\nimport {addTodoListAC, removeTodoListAC, setTodoListsAC, TodoListType} from \"../todolist-reducer\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    description: null | string,\r\n    todoListId: string,\r\n    order: number,\r\n    status: TaskStatuses,\r\n    priority: TodoTaskPriority,\r\n    startDate: string,\r\n    deadline: string,\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TodoTaskPriority {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type RemoveTaskActionType = {\r\n    todoListID: string\r\n    taskID: string\r\n};\r\nexport type ChangeTaskStatusActionType = {\r\n    taskID: string\r\n    status: TaskStatuses\r\n    todoListID: string\r\n};\r\nexport type ChangeTaskTitleActionType = {\r\n    todoListID: string\r\n    taskID: string\r\n    taskTitle: string\r\n};\r\nexport type SetTasksActionType = {\r\n    tasks: TaskType[]\r\n    todoListID: string\r\n};\r\nexport type AddTaskActionType = {\r\n    todoListID: string\r\n    taskTitle: string\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk(\r\n    'tasks/fetchTasks',\r\n    async (todoListID: string, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.getTasks(todoListID)\r\n            const tasks: TaskType[] = res.data.items\r\n            dispatch(taskSlice.actions.setTasksAC({tasks, todoListID}))\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const removeTask = createAsyncThunk(\r\n    'tasks/removeTask',\r\n    async (params: RemoveTaskActionType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            await todoListApi.deleteTask(params.todoListID, params.taskID)\r\n            dispatch(taskSlice.actions.removeTaskAC(params))\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const addTask = createAsyncThunk(\r\n    'tasks/addTask',\r\n    async (params: AddTaskActionType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.createTask(params.todoListID, params.taskTitle)\r\n            const task = res.data.data.item\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(taskSlice.actions.addTaskAC(task))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const changeTaskStatus = createAsyncThunk(\r\n    'tasks/changeTaskStatus',\r\n    async (params: ChangeTaskStatusActionType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        todoListApi.updateTask(params.todoListID, params.taskID, {status: params.status})\r\n            .then(() => {\r\n                dispatch(taskSlice.actions.changeTaskStatusAC(params))\r\n                dispatch(changeAppStatus(\"succeed\"))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    });\r\n\r\nexport const changeTaskTitleTC = createAsyncThunk(\r\n    'tasks/changeTaskStatus',\r\n    async (params: ChangeTaskTitleActionType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            await todoListApi.updateTask(params.todoListID, params.taskID, {title: params.taskTitle})\r\n            dispatch(taskSlice.actions.changeTaskTitleAC(params))\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<RemoveTaskActionType>) => {\r\n            return {\r\n                ...state, [action.payload.todoListID]: state[action.payload.todoListID].filter(task =>\r\n                    task.id !== action.payload.taskID)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<TaskType>) => {\r\n            return {...state, [action.payload.todoListId]: [action.payload, ...state[action.payload.todoListId]]}\r\n        },\r\n        changeTaskStatusAC: (state, action: PayloadAction<ChangeTaskStatusActionType>) => {\r\n            return {\r\n                ...state, [action.payload.todoListID]: state[action.payload.todoListID]\r\n                    .map(t => t.id === action.payload.taskID ? {...t, status: action.payload.status} : t)\r\n            }\r\n        },\r\n        changeTaskTitleAC: (state, action: PayloadAction<ChangeTaskTitleActionType>) => {\r\n            return {\r\n                ...state, [action.payload.todoListID]: state[action.payload.todoListID]\r\n                    .map(t => t.id === action.payload.taskID ? {...t, title: action.payload.taskTitle} : t)\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<SetTasksActionType>) => {\r\n            return {...state, [action.payload.todoListID]: action.payload.tasks}\r\n        }\r\n    },\r\n    extraReducers: (builder => {\r\n        builder\r\n            .addCase(addTodoListAC,\r\n                (state, action: PayloadAction<TodoListType>) => {\r\n                    return {...state, [action.payload.id]: []}\r\n                })\r\n            .addCase(removeTodoListAC,\r\n                (state, action: PayloadAction<string>) => {\r\n                    delete state[action.payload]\r\n                    return {...state}\r\n                })\r\n            .addCase(setTodoListsAC,\r\n                (state, action: PayloadAction<TodoListType[]>) => {\r\n                    action.payload.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n    })\r\n});\r\n","import React from 'react'\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    status: RequestStatusType\r\n    isLoggedIn: boolean\r\n    logoutClickHandler: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        status,\r\n        isLoggedIn,\r\n        logoutClickHandler\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                { status === 'loading' && <LinearProgress color=\"secondary\"/> }\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logoutClickHandler}>Log out</Button> }\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n})\r\nexport default Header","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, RootStateType} from \"./store\";\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import axios from \"axios\";\r\nimport {TaskStatuses, TaskType, TodoTaskPriority} from \"../features/TodoList/Task/tasks-reducer\";\r\nimport {TodoListType} from \"../features/TodoList/todolist-reducer\";\r\n\r\nexport type TaskAPIType = {\r\n    items: TaskType[]\r\n};\r\n\r\nexport type ResponseType<D = {}> = {\r\n    \"data\": D\r\n    \"messages\": string[]\r\n    \"resultCode\": number\r\n};\r\n\r\nexport type UpdateTaskRequestType = {\r\n    title?: string\r\n    description?: string | null\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriority\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n};\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-key': 'c3ff16a4-4b9d-490a-b188-2440deac59e8'\r\n    }\r\n});\r\n\r\nexport const todoListApi = {\r\n    createTodoList(todoListTitle: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>(`todo-lists`, {\r\n            title: todoListTitle\r\n        })\r\n\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>(`todo-lists`)\r\n    },\r\n    updateTodoList(todoListID: string, todoListTitle: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${ todoListID }`, {\r\n            title: todoListTitle\r\n        })\r\n    },\r\n    deleteTodoList(todoListID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ todoListID }`)\r\n    },\r\n    getTasks(todoListID: string) {\r\n        return instance.get<TaskAPIType>(`todo-lists/${ todoListID }/tasks`)\r\n    },\r\n    createTask(todoListID: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${ todoListID }/tasks`, {\r\n            title: taskTitle\r\n        })\r\n    },\r\n    deleteTask(todoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ todoListID }/tasks/${ taskID }`)\r\n    },\r\n    updateTask(todoListID: string, taskID: string, updateTaskRequest: UpdateTaskRequestType) {\r\n        return instance.put<ResponseType>(`todo-lists/${ todoListID }/tasks/${ taskID }`, updateTaskRequest)\r\n    }\r\n};\r\n","import {instance} from \"./todo-list-api\";\r\nimport {ResponseType} from './todo-list-api'\r\n\r\nexport type LoginParamsType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeResponseDataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authApi = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(model: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: string }>>(`auth/login`, model)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n","import {authApi} from \"../api/auth-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/app-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed';\r\n\r\nexport type AppReducerStateType = {\r\n    status: RequestStatusType\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: AppReducerStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializedApp = createAsyncThunk(\r\n    'app/initializedApp',\r\n    async (_, {dispatch}) => {\r\n        dispatch(appSlice.actions.changeAppStatus(\"loading\"))\r\n        try {\r\n            await authApi.me()\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setIsLoggedInAC(true))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                    dispatch(appSlice.actions.setIsInitialized(true))\r\n                })\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n        }\r\n        dispatch(appSlice.actions.changeAppStatus(\"succeed\"))\r\n    }\r\n);\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        changeAppStatus: (state, action: PayloadAction<RequestStatusType>) => {\r\n            state.status = action.payload\r\n        },\r\n        setError: (state, action: PayloadAction<string | null>) => {\r\n            state.error = action.payload\r\n        },\r\n        setIsInitialized: (state, action: PayloadAction<boolean>) => {\r\n            state.isInitialized = action.payload\r\n        },\r\n    },\r\n});\r\n\r\nexport const {changeAppStatus, setError, setIsInitialized} = appSlice.actions\r\nexport default appSlice.reducer\r\n\r\n\r\n\r\n","import {ResponseType} from '../api/todo-list-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {changeAppStatus, setError} from \"../app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (errorMessage: string | null, dispatch: Dispatch) => {\r\n    dispatch(setError(errorMessage))\r\n    dispatch(changeAppStatus(\"succeed\"))\r\n}\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages) {\r\n        dispatch(setError(data.messages[0]))\r\n    } else {\r\n        dispatch(setError(\"Some error occurred\"))\r\n    }\r\n    dispatch(changeAppStatus(\"succeed\"))\r\n}","import {authApi, LoginParamsType} from \"../../api/auth-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../app/app-reducer\";\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const setIsLoggedIn = createAsyncThunk(\r\n    'auth/setIsLoggedIn',\r\n    async (data: LoginParamsType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            authApi.login(data)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(authSlice.actions.setIsLoggedInAC(true))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n        }\r\n        dispatch(changeAppStatus(\"succeed\"))\r\n    });\r\n\r\nexport const removeLogin = createAsyncThunk(\r\n    'auth/removeLogin',\r\n    async (_, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            authApi.logout()\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(authSlice.actions.setIsLoggedInAC(false))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n        dispatch(changeAppStatus('succeed'))\r\n    });\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC: (state, action: PayloadAction<boolean>) => {\r\n            state.isLoggedIn = action.payload\r\n        },\r\n    },\r\n});\r\n\r\nexport const {setIsLoggedInAC} = authSlice.actions\r\n\r\nexport default authSlice.reducer\r\n","import React, {useCallback} from \"react\";\r\nimport Header from \"./Header\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../app/hooks\";\r\nimport {removeLogin} from \"../Login/auth-reducer\";\r\n\r\n\r\nconst HeaderContainer = React.memo(() => {\r\n\r\n    const status = useAppSelector((state) => state.app.status)\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutClickHandler = useCallback(() => {\r\n        dispatch(removeLogin())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Header\r\n            status={status}\r\n            isLoggedIn={isLoggedIn}\r\n            logoutClickHandler={logoutClickHandler}\r\n        />\r\n    )\r\n});\r\nexport default HeaderContainer;","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\n\r\ntype ErrorSnackbarPropsType = {\r\n    error: string | null\r\n    isOpen: boolean\r\n    zeroingError: () => void\r\n}\r\n\r\nconst Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar: React.FC<ErrorSnackbarPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        error,\r\n        isOpen,\r\n        zeroingError\r\n    } = props\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        zeroingError()\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../app/hooks\";\r\nimport {setError} from \"../../app/app-reducer\";\r\n\r\n\r\nconst ErrorSnackbarContainer: React.FC = React.memo(() => {\r\n\r\n    const error = useAppSelector((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const zeroingError = useCallback(() => {\r\n        dispatch(setError(null))\r\n    },[dispatch])\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar\r\n                error={error}\r\n                isOpen={isOpen}\r\n                zeroingError={zeroingError}\r\n            />\r\n        </>\r\n    )\r\n})\r\nexport default ErrorSnackbarContainer","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropsType> = React.memo(props => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(error !== null) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n            value={ title }\r\n            label={\"Title\"}\r\n            error={error}\r\n            disabled={props.disabled}\r\n            onChange={ onChangeHandler }\r\n            onKeyPress={ onKeyPressHandler }\r\n            onBlur={() => setError(false)}\r\n            />\r\n            <IconButton onClick={ addItem } disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            { error && <div className={ \"error-message\" }>{ \"Title is required!\" }</div> }\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = React.memo(props => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                value={ title }\r\n                autoFocus={ true }\r\n                disabled={props.disabled}\r\n                onBlur={ offEditMode }\r\n                onChange={ changeTitle }\r\n                onKeyPress={ onKeyPressEditMode! }\r\n            /> :\r\n            <span onDoubleClick={ onEditMode }>{ props.title }</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;","import {todoListApi} from \"../../api/todo-list-api\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../app/app-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n};\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType,\r\n};\r\n\r\nexport type ChangeTodoListFilterPayloadType = {\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\nexport type ChangeTodoListTitleType = {\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeEntityStatusPayloadType = {\r\n    entityStatus: RequestStatusType\r\n    todoListID: string\r\n}\r\n\r\nconst initialState: TodoListDomainType[] = [];\r\n\r\nexport const fetchTodoLists = createAsyncThunk(\r\n    'todoLists/fetchTodoLists',\r\n    async (_, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.getTodoLists()\r\n            dispatch(todoListSlice.actions.setTodoListsAC(res.data))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n        dispatch(changeAppStatus(\"succeed\"))\r\n    });\r\n\r\nexport const deleteTodoList = createAsyncThunk(\r\n    'todoLists/deleteTodoList',\r\n    async (todoListID: string, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        dispatch(todoListSlice.actions.changeEntityStatusAC({entityStatus: 'loading', todoListID}))\r\n        try {\r\n            await todoListApi.deleteTodoList(todoListID)\r\n            dispatch(todoListSlice.actions.removeTodoListAC(todoListID))\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n            dispatch(todoListSlice.actions.changeEntityStatusAC({entityStatus: 'idle', todoListID}))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const createTodoList = createAsyncThunk(\r\n    'todoLists/createTodoList',\r\n    async (todoListTitle: string, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.createTodoList(todoListTitle)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todoListSlice.actions.addTodoListAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const changeTodoListTitle = createAsyncThunk(\r\n    'todoLists/changeTodoListTitle',\r\n    async (params:ChangeTodoListTitleType, {dispatch}) => {\r\n        dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            await todoListApi.updateTodoList(params.todoListID, params.title)\r\n            dispatch(todoListSlice.actions.changeTodoListTitleAC(params))\r\n            dispatch(changeAppStatus(\"succeed\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        }\r\n    });\r\n\r\nexport const todoListSlice = createSlice({\r\n    name: 'todoList',\r\n    initialState,\r\n    reducers: {\r\n        addTodoListAC: (state, action: PayloadAction<TodoListType>) => {\r\n            return [{...action.payload, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        },\r\n        removeTodoListAC: (state, action: PayloadAction<string>) => {\r\n            return state.filter(tl => tl.id !== action.payload)\r\n        },\r\n        changeTodoListFilterAC: (state, action: PayloadAction<ChangeTodoListFilterPayloadType>) => {\r\n            return state.map(tl => tl.id === action.payload.id ?\r\n                {...tl, filter: action.payload.filter} : tl)\r\n        },\r\n        changeTodoListTitleAC: (state, action: PayloadAction<ChangeTodoListTitleType>) => {\r\n            return state.map(tl => tl.id === action.payload.todoListID ?\r\n                {...tl, title: action.payload.title} : tl)\r\n        },\r\n        setTodoListsAC: (state, action: PayloadAction<TodoListType[]>) => {\r\n            return action.payload.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        },\r\n        changeEntityStatusAC: (state, action: PayloadAction<ChangeEntityStatusPayloadType>) => {\r\n            return state.map(tl => tl.id === action.payload.todoListID ?\r\n                {...tl, entityStatus: action.payload.entityStatus} : tl)\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addTodoListAC, removeTodoListAC, changeTodoListFilterAC, setTodoListsAC} = todoListSlice.actions\r\nexport default todoListSlice.reducer","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"./tasks-reducer\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskTitle: (taskID: string, title: string) => void;\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void;\r\n    deleteTask: (taskID: string) => void;\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(props => {\r\n    console.log(\"task\")\r\n    const {\r\n        task,\r\n        deleteTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    } = props\r\n\r\n    const removeTask = useCallback(() => {\r\n        deleteTask(task.id)\r\n    }, [task.id])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const taskStatus = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        changeTaskStatus(task.id, taskStatus);\r\n    }, [task.id])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [task.id])\r\n\r\n\r\n    return (\r\n        <li className={ task.status === TaskStatuses.Completed ? \"is-done\" : \"\" }>\r\n            <Checkbox\r\n                color={ \"secondary\" }\r\n                onChange={ changeStatus }\r\n                checked={ task.status === TaskStatuses.Completed }\r\n            />\r\n            <EditableSpan title={ task.title } changeItem={ changeTitle }/>\r\n            <IconButton onClick={ removeTask }>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </li>\r\n    )\r\n});\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../../app/hooks\";\r\nimport {changeTaskStatus, changeTaskTitleTC, fetchTasks, removeTask, TaskStatuses} from \"./tasks-reducer\";\r\nimport {FilterValuesType} from \"../todolist-reducer\";\r\n\r\ntype TaskContainerPropsType = {\r\n    todoListID: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst TaskContainer: React.FC<TaskContainerPropsType> = (props) => {\r\n    console.log(\"task container\")\r\n    /*const allTasks = useSelector<AppRootStateType, TaskStateType>((state) => state.tasks)*/\r\n    const allTasks = useAppSelector((state) => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(props.todoListID))\r\n    }, [])\r\n\r\n    let taskForTodoList = allTasks[props.todoListID];\r\n    if (props.filter === \"active\") {\r\n        taskForTodoList = taskForTodoList.filter(t => !t.status)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        taskForTodoList = taskForTodoList.filter(t => t.status)\r\n    }\r\n\r\n    const removeTaskCallback = useCallback((taskID: string) => {\r\n        dispatch(removeTask({todoListID: props.todoListID, taskID}))\r\n    }, [dispatch])\r\n\r\n    const changeStatusCallback = useCallback((taskID: string, status: TaskStatuses) => {\r\n        dispatch(changeTaskStatus({todoListID: props.todoListID, taskID, status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitleCallback = useCallback((taskID: string, taskTitle: string) => {\r\n        dispatch(changeTaskTitleTC({todoListID: props.todoListID, taskID, taskTitle}))\r\n    }, [dispatch])\r\n\r\n    const tasks = taskForTodoList.map(taskObj => {\r\n        return (\r\n            <Task\r\n                key={taskObj.id}\r\n                task={taskObj}\r\n                changeTaskTitle={changeTaskTitleCallback}\r\n                changeTaskStatus={changeStatusCallback}\r\n                deleteTask={removeTaskCallback}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {tasks}\r\n        </>\r\n    )\r\n}\r\nexport default TaskContainer","import React, {MouseEvent, useCallback} from 'react';\r\nimport '../../app/App.css';\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport TaskContainer from \"./Task/TaskContainer\";\r\nimport {TodoListDomainType} from \"./todolist-reducer\";\r\n\r\nexport type TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    disable: boolean\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (trigger: string | undefined, todoListID: string) => void;\r\n    changeTodoListTitle: (title: string, todoListID: string) => void;\r\n    addTaskForTodoList: (title: string, todoListID: string) => void;\r\n}\r\n\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = React.memo(props => {\r\n    console.log(\"todolist\")\r\n    const {\r\n        todoList,\r\n        disable,\r\n        removeTodoList,\r\n        changeTodoListFilter,\r\n        changeTodoListTitle,\r\n        addTaskForTodoList,\r\n    } = props\r\n\r\n    const changeFilter = useCallback((e: MouseEvent<HTMLButtonElement>) => {\r\n        changeTodoListFilter(e.currentTarget.dataset.filter, todoList.id)\r\n    }, [todoList.id])\r\n\r\n    const deleteTodoList = useCallback(() => {\r\n        removeTodoList(todoList.id)\r\n    }, [todoList.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        addTaskForTodoList(title, todoList.id)\r\n    }, [todoList.id, addTaskForTodoList])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        changeTodoListTitle(title, todoList.id)\r\n    }, [changeTodoListTitle, todoList.id])\r\n\r\n    return <div>\r\n        <div>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={ props.todoList.title }\r\n                    changeItem={ changeTitle }\r\n                    disabled={disable}\r\n                />\r\n                <IconButton onClick={ deleteTodoList } disabled={disable}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={ addTask } disabled={disable}/>\r\n            <ul className={ \"list-style\" }>\r\n                <TaskContainer todoListID={ todoList.id } filter={ todoList.filter }/>\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    data-filter=\"all\"\r\n                    color={ todoList.filter === \"all\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>All\r\n                </Button>\r\n                <Button\r\n                    data-filter=\"active\"\r\n                    color={ todoList.filter === \"active\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>Active\r\n                </Button>\r\n                <Button\r\n                    data-filter=\"completed\"\r\n                    color={ todoList.filter === \"completed\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default TodoList;","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TodoList from \"./TodoList\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {useAppSelector} from \"../../app/hooks\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitle,\r\n    createTodoList,\r\n    deleteTodoList,\r\n    fetchTodoLists\r\n} from \"./todolist-reducer\";\r\nimport {addTask} from \"./Task/tasks-reducer\";\r\n\r\n\r\nconst TodoListContainer = React.memo(() => {\r\n    console.log(\"todo list container\")\r\n    const todoLists = useAppSelector((state) => state.todoLists)\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n\r\n    const changeTodoListFilterCallback = useCallback((trigger: string | undefined, todoListID: string) => {\r\n        switch (trigger) {\r\n            case \"all\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"all\", id:todoListID}))\r\n            case \"active\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"active\", id:todoListID}))\r\n            case \"completed\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"completed\", id:todoListID}))\r\n            default:\r\n                return dispatch(changeTodoListFilterAC({filter: \"all\", id:todoListID}))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const addTodoListCallback = useCallback((todoListTitle: string) => {\r\n        dispatch(createTodoList(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitleCallback = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitle({title, todoListID}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoListCallback = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoList(todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTaskForTodoListCallback = useCallback((taskTitle: string, todoListID: string) => {\r\n        dispatch(addTask({todoListID, taskTitle}))\r\n    }, [dispatch])\r\n\r\n    const content = todoLists.map(tl => {\r\n        const disable = tl.entityStatus === \"loading\"\r\n        return (\r\n            <Grid item key={ tl.id }>\r\n                <Paper elevation={ 10 } style={ {padding: \"10px\"} }>\r\n                    <TodoList\r\n                        todoList={tl}\r\n                        disable={disable}\r\n                        changeTodoListFilter={ changeTodoListFilterCallback }\r\n                        addTaskForTodoList={ addTaskForTodoListCallback }\r\n                        changeTodoListTitle={ changeTodoListTitleCallback }\r\n                        removeTodoList={ removeTodoListCallback }\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container fixed={ true }>\r\n            <Grid container style={ {margin: \"20px 0px\"} }>\r\n                <AddItemForm addItem={ addTodoListCallback }/>\r\n            </Grid>\r\n            <Grid container spacing={ 2 }>\r\n                { content }\r\n            </Grid>\r\n        </Container>\r\n    )\r\n})\r\nexport default TodoListContainer","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {LoginParamsType} from \"../../api/auth-api\";\r\n\r\ntype LoginPropsType = {\r\n    loginHandler: (loginData: LoginParamsType) => void\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        loginHandler,\r\n    } = props\r\n\r\n    const validate = (values: LoginParamsType) => {\r\n        const errors: LoginParamsType = {};\r\n        if (!values.email) {\r\n            errors.email = 'Enter your email';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Enter password';\r\n        } else if (values.password.length <= 2) {\r\n            errors.password = 'Password must be more then 2 characters';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            loginHandler(values)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={ 4 }>\r\n                <form onSubmit={ formik.handleSubmit }>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={ 'https://social-networ.samuraijs.com/' }\r\n                                   target={ '_blank' }>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                { ...formik.getFieldProps(\"email\") }\r\n                            />\r\n                            { formik.touched.email && formik.errors.email ?\r\n                                <div style={ {color: 'red'} }>{ formik.errors.email }</div> : null }\r\n\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                { ...formik.getFieldProps(\"password\") }\r\n                            />\r\n\r\n                            { formik.touched.password && formik.errors.password ?\r\n                                <div style={ {color: 'red'} }>{ formik.errors.password }</div> : null }\r\n\r\n                            <FormControlLabel\r\n                                label={ 'Remember me' }\r\n                                control={ <Checkbox\r\n                                    { ...formik.getFieldProps(\"rememberMe\") }\r\n                                    checked={ formik.values.rememberMe }\r\n                                /> }\r\n                            />\r\n                            <Button type={ 'submit' } variant={ 'contained' } color={ 'primary' }>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {Login} from \"./Login\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../api/auth-api\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../app/hooks\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\n\r\nexport const LoginContainer: React.FC = React.memo(() => {\r\n\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const loginHandler = useCallback((loginData: LoginParamsType) => {\r\n       dispatch(setIsLoggedIn(loginData))\r\n    }, [])\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Login loginHandler={loginHandler}/>\r\n})","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport TodoListContainer from \"./TodoList/TodoListContainer\";\r\nimport {LoginContainer} from \"./Login/LoginContainer\";\r\n\r\n\r\nexport const PATH = {\r\n    TODO_LIST: \"/\",\r\n    LOGIN: \"/login\",\r\n    ERROR_404: '/404'\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={PATH.TODO_LIST} render={() => <TodoListContainer/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.ERROR_404} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={PATH.ERROR_404}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport HeaderContainer from \"../features/Header/HeaderContainer\";\r\nimport ErrorSnackbarContainer from \"../components/ErrorSnackbar/ErroSnackbarContainer\";\r\nimport {Routes} from \"../features/Routes\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {useAppSelector} from \"./hooks\";\r\nimport {initializedApp} from \"./app-reducer\";\r\n\r\nexport const App: React.FC = () => {\r\n    console.log(\"app\")\r\n    const isInitialized = useAppSelector((state) => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedApp())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <HeaderContainer/>\r\n            <Routes/>\r\n            <ErrorSnackbarContainer/>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appSlice} from \"./app-reducer\";\r\nimport {authSlice} from \"../features/Login/auth-reducer\";\r\nimport {todoListSlice} from \"../features/TodoList/todolist-reducer\";\r\nimport {taskSlice} from \"../features/TodoList/Task/tasks-reducer\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        app: appSlice.reducer,\r\n        auth: authSlice.reducer,\r\n        todoLists: todoListSlice.reducer,\r\n        tasks: taskSlice.reducer\r\n    }\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {App} from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}