{"version":3,"sources":["components/Modal/ModalWindow.module.scss","serviceWorker.ts","features/TodoList/Task/task-types.ts","features/Header/Header.tsx","app/hooks.ts","api/todo-list-api.ts","app/app-reducer.ts","utils/app-utils.ts","features/Login/auth-reducer.ts","features/Header/HeaderContainer.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/ErrorSnackbar/ErroSnackbarContainer.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoList/Task/Task.tsx","features/TodoList/todolist-reducer.ts","features/TodoList/Task/tasks-reducer.ts","features/TodoList/Task/TaskContainer.tsx","features/TodoList/TodoList.tsx","features/TodoList/TodoListContainer.tsx","features/Login/Login.tsx","features/Login/LoginContainer.tsx","features/Routes.tsx","utils/styles-util.ts","components/AddItemForm/AddItemForm.tsx","components/Modal/ModalWindow.tsx","components/Modal/ModalContainer.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriority","Header","React","memo","props","status","isLoggedIn","logoutClickHandler","AppBar","position","LinearProgress","color","Toolbar","Grid","container","direction","justifyContent","alignItems","item","xs","IconButton","edge","aria-label","Menu","Button","variant","onClick","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","authApi","get","model","post","delete","todoListApi","todoListTitle","title","todoListID","put","taskTitle","taskID","updateTaskRequest","initializedApp","createAsyncThunk","_","thunkAPI","a","dispatch","changeAppStatus","res","data","resultCode","setIsLoggedInAC","handleServerAppError","handleServerNetworkError","appSlice","createSlice","name","initialState","error","isInitialized","modal","isOpen","modalTitle","modalStatus","itemID","reducers","state","action","payload","setError","setModalStatus","extraReducers","builder","addCase","fulfilled","actions","appReducer","reducer","errorMessage","console","log","messages","changeModalStatus","e","trigger","currentTarget","children","attributes","getNamedItem","value","login","rejectWithValue","errors","fieldsErrors","message","logout","authSlice","asyncAuthActions","authReducer","HeaderContainer","app","auth","useCallback","ErrorSnackbar","zeroingError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","elevation","ErrorSnackbarContainer","EditableSpan","useState","editMode","setEditMode","setTitle","offEditMode","changeItem","TextField","autoFocus","disabled","onBlur","onChange","onKeyPress","key","onDoubleClick","Task","task","deleteTask","changeTaskStatus","changeTaskTitle","removeTask","id","changeStatus","taskStatus","checked","Completed","New","changeTitle","className","Checkbox","Tooltip","Delete","fetchTodoLists","todoLists","deleteTodoList","changeEntityStatusAC","entityStatus","createTodoList","todoList","changeTodoListTitle","params","todoListSlice","changeTodoListFilterAC","map","tl","filter","unshift","splice","findIndex","index","asyncTodoListActions","todoListReducer","fetchTasks","tasks","items","addTask","updateTask","getState","find","t","apiModel","deadline","description","priority","startDate","taskSlice","forEach","asyncTasksActions","tasksReducer","TaskContainer","allTasks","useEffect","taskForTodoList","removeTaskCallback","changeStatusCallback","changeTaskTitleCallback","taskObj","TodoList","disable","removeTodoList","changeTodoListFilter","changeFilter","dataset","AddCircle","fontSize","data-action","data-filter","size","TodoListContainer","changeTodoListFilterCallback","changeTodoListTitleCallback","removeTodoListCallback","addTaskForTodoListCallback","content","Paper","style","padding","addTaskForTodoList","Container","fixed","margin","spacing","to","Login","formik","loginHandler","useFormik","initialValues","email","password","rememberMe","validate","values","test","length","onSubmit","formikHelpers","rejected","setFieldError","field","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","label","getFieldProps","touched","type","FormControlLabel","control","LoginContainer","loginData","PATH","Routes","exact","path","render","from","BtnContainer","styled","width","display","flexFlow","marginTop","AddItemForm","addItemTitle","trimmedTitle","trim","addItem","ModalWindow","addTitle","Typography","Close","ModalContainer","addTitleHandler","Dialog","App","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.56b5c6cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ModalWindow_container__10P4q\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {UpdateTaskRequestType} from \"../../../api/api-types\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    todoListId: string,\r\n    order: number,\r\n    status: TaskStatuses,\r\n    priority: TodoTaskPriority,\r\n    startDate: string,\r\n    deadline: string,\r\n    addedDate: string\r\n};\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TodoTaskPriority {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type RemoveTaskActionType = {\r\n    todoListID: string\r\n    taskID: string\r\n};\r\n\r\nexport type UpdateTaskActionType = {\r\n    taskID: string\r\n    model: UpdateTaskRequestType\r\n    todoListID: string\r\n};\r\n\r\nexport type SetTasksActionType = {\r\n    tasks: TaskType[]\r\n    todoListID: string\r\n};\r\n\r\nexport type AddTaskActionType = {\r\n    todoListID: string\r\n    taskTitle: string\r\n};\r\n","import React from 'react'\r\nimport {AppBar, Grid} from \"@material-ui/core\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {RequestStatusType} from \"../../app/app-types\";\r\n\r\ntype HeaderPropsType = {\r\n    status: RequestStatusType\r\n    isLoggedIn: boolean\r\n    logoutClickHandler: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        status,\r\n        isLoggedIn,\r\n        logoutClickHandler\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n                <Toolbar>\r\n                    <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Grid item xs={11}>\r\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                <Menu/>\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            {isLoggedIn ?\r\n                                <Button color=\"inherit\" variant=\"outlined\" onClick={logoutClickHandler}>\r\n                                    Log out\r\n                                </Button> :\r\n                                <Button color={\"inherit\"} variant=\"outlined\">Login</Button>}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n})\r\nexport default Header","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType, ThunkAppDispatch} from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<ThunkAppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import axios from \"axios\";\r\nimport {ResponseType, AuthMeResponseDataType, LoginParamsType, TaskAPIType, UpdateTaskRequestType} from \"./api-types\";\r\nimport {TaskType} from \"../features/TodoList/Task/task-types\";\r\nimport {TodoListType} from \"../features/TodoList/todo-list-types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-key': 'c3ff16a4-4b9d-490a-b188-2440deac59e8'\r\n    }\r\n});\r\n\r\nexport const authApi = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(model: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: string }>>(`auth/login`, model)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const todoListApi = {\r\n    createTodoList(todoListTitle: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>(`todo-lists`, {\r\n            title: todoListTitle\r\n        })\r\n\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>(`todo-lists`)\r\n    },\r\n    updateTodoList(todoListID: string, todoListTitle: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${ todoListID }`, {\r\n            title: todoListTitle\r\n        })\r\n    },\r\n    deleteTodoList(todoListID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ todoListID }`)\r\n    },\r\n    getTasks(todoListID: string) {\r\n        return instance.get<TaskAPIType>(`todo-lists/${ todoListID }/tasks`)\r\n    },\r\n    createTask(todoListID: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${ todoListID }/tasks`, {\r\n            title: taskTitle\r\n        })\r\n    },\r\n    deleteTask(todoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ todoListID }/tasks/${ taskID }`)\r\n    },\r\n    updateTask(todoListID: string, taskID: string, updateTaskRequest: UpdateTaskRequestType) {\r\n        return instance.put<ResponseType>(`todo-lists/${ todoListID }/tasks/${ taskID }`, updateTaskRequest)\r\n    }\r\n};\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/app-utils\";\r\nimport {authApi} from \"../api/todo-list-api\";\r\nimport {AppReducerStateType, ModalType, RequestStatusType} from \"./app-types\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nexport const initializedApp = createAsyncThunk('app/initializedApp', async (_, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await authApi.me()\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n                return thunkAPI.dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.dispatch(setIsLoggedInAC(false))\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, thunkAPI.dispatch)\r\n            return thunkAPI.dispatch(setIsLoggedInAC(false))\r\n        }\r\n    });\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false,\r\n        modal: {\r\n            isOpen: false,\r\n            modalTitle: '',\r\n            modalStatus: 'no-status',\r\n            itemID: '',\r\n        }\r\n    } as AppReducerStateType,\r\n    reducers: {\r\n        changeAppStatus: (state, action: PayloadAction<RequestStatusType>) => {\r\n            state.status = action.payload\r\n        },\r\n        setError: (state, action: PayloadAction<string | null>) => {\r\n            state.error = action.payload\r\n        },\r\n        setModalStatus: (state, action: PayloadAction<ModalType>) => {\r\n            state.modal = action.payload\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializedApp.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n    }\r\n});\r\n\r\nexport const asyncAppActions = {initializedApp}\r\nexport const {changeAppStatus, setError, setModalStatus} = appSlice.actions\r\nexport const appReducer = appSlice.reducer\r\n\r\n\r\n\r\n","import {MouseEvent} from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/api-types\";\r\nimport {changeAppStatus, setError, setModalStatus} from \"../app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (errorMessage: string | null, dispatch: Dispatch) => {\r\n    console.log(errorMessage)\r\n    dispatch(setError(errorMessage))\r\n    dispatch(changeAppStatus(\"succeed\"))\r\n};\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages) {\r\n        console.log(data.messages[0])\r\n        dispatch(setError(data.messages[0]))\r\n    } else {\r\n        dispatch(setError(\"Some error occurred\"))\r\n    }\r\n    dispatch(changeAppStatus(\"succeed\"))\r\n};\r\n\r\nexport const changeModalStatus = (e: MouseEvent<HTMLButtonElement>, dispatch: Dispatch, itemID?: string) => {\r\n    const trigger: Attr | null = e.currentTarget.children[0].attributes.getNamedItem(\"data-action\")\r\n    if (trigger !== null) {\r\n        if (trigger.value === 'add-list') {\r\n            dispatch(setModalStatus({\r\n                isOpen: true,\r\n                modalStatus: 'add-list',\r\n                modalTitle: 'Enter new to-do list name',\r\n            }))\r\n        }\r\n        if (trigger.value === 'add-task') {\r\n            dispatch(setModalStatus({\r\n                isOpen: true,\r\n                modalStatus: 'add-task',\r\n                modalTitle: 'Enter the new task name',\r\n                itemID,\r\n            }))\r\n        }\r\n    }\r\n};","import {handleServerAppError, handleServerNetworkError} from \"../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../app/app-reducer\";\r\nimport {LoginParamsType} from \"../../api/api-types\";\r\nimport {authApi} from \"../../api/todo-list-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {ThunkError} from \"../../app/store\";\r\n\r\nexport type AuthInitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, ThunkError>('auth/login', async (data: LoginParamsType, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await authApi.login(data)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n                return;\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            const error: AxiosError = err\r\n            handleServerNetworkError(err, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await authApi.logout()\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus('succeed'))\r\n                return;\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    });\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    } as AuthInitialStateType,\r\n    reducers: {\r\n        setIsLoggedInAC: (state, action: PayloadAction<boolean>) => {\r\n            state.isLoggedIn = action.payload\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled,\r\n                (state) => {\r\n                    state.isLoggedIn = true\r\n                })\r\n            .addCase(logout.fulfilled,\r\n                (state) => {\r\n                    state.isLoggedIn = false\r\n                })\r\n    }\r\n});\r\n\r\nexport const {setIsLoggedInAC} = authSlice.actions\r\nexport const asyncAuthActions = {login, logout}\r\nexport const authReducer = authSlice.reducer","import React, {useCallback} from \"react\";\r\nimport Header from \"./Header\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {asyncAuthActions} from \"../Login/auth-reducer\";\r\n\r\n\r\nconst HeaderContainer = React.memo(() => {\r\n\r\n    const status = useAppSelector((state) => state.app.status)\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const logoutClickHandler = useCallback(() => {\r\n        dispatch(asyncAuthActions.logout())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Header\r\n            status={status}\r\n            isLoggedIn={isLoggedIn}\r\n            logoutClickHandler={logoutClickHandler}\r\n        />\r\n    )\r\n});\r\nexport default HeaderContainer;","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport {Alert, AlertProps} from \"@material-ui/core\";\r\n\r\ntype ErrorSnackbarPropsType = {\r\n    error: string | null\r\n    isOpen: boolean\r\n    zeroingError: () => void\r\n}\r\n\r\n/*const Alert = (props: AlertProps) => {\r\n    return <Alert elevation={6} variant=\"filled\" {...props}/>\r\n};*/\r\n\r\nexport const ErrorSnackbar: React.FC<ErrorSnackbarPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        error,\r\n        isOpen,\r\n        zeroingError\r\n    } = props\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        zeroingError()\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" elevation={6} variant=\"filled\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {setError} from \"../../app/app-reducer\";\r\n\r\n\r\nconst ErrorSnackbarContainer: React.FC = React.memo(() => {\r\n\r\n    const error = useAppSelector((state) => state.app.error)\r\n    const dispatch = useAppDispatch();\r\n    const isOpen = error !== null\r\n\r\n    const zeroingError = useCallback(() => {\r\n        dispatch(setError(null))\r\n    },[dispatch])\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar\r\n                error={error}\r\n                isOpen={isOpen}\r\n                zeroingError={zeroingError}\r\n            />\r\n        </>\r\n    )\r\n})\r\nexport default ErrorSnackbarContainer","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = React.memo(props => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                value={ title }\r\n                autoFocus={ true }\r\n                disabled={props.disabled}\r\n                onBlur={ offEditMode }\r\n                onChange={ changeTitle }\r\n                onKeyPress={ onKeyPressEditMode! }\r\n            /> :\r\n            <span onDoubleClick={ onEditMode }>{ props.title }</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, Tooltip} from '@material-ui/core';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"./task-types\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskTitle: (taskID: string, title: string) => void;\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void;\r\n    deleteTask: (taskID: string) => void;\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(props => {\r\n    console.log(\"task\")\r\n    const {\r\n        task,\r\n        deleteTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    } = props\r\n\r\n    const removeTask = useCallback(() => {\r\n        deleteTask(task.id)\r\n    }, [deleteTask, task.id])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const taskStatus = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        changeTaskStatus(task.id, taskStatus);\r\n    }, [changeTaskStatus, task.id])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n\r\n    return (\r\n        <li className={ task.status === TaskStatuses.Completed ? \"is-done\" : \"\" }>\r\n            <Checkbox\r\n                color={ \"secondary\" }\r\n                onChange={ changeStatus }\r\n                checked={ task.status === TaskStatuses.Completed }\r\n            />\r\n            <EditableSpan title={ task.title } changeItem={ changeTitle }/>\r\n            <Tooltip title={`Delete Task: ${task.title}`}>\r\n                <IconButton onClick={ removeTask }>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Tooltip>\r\n        </li>\r\n    )\r\n});\r\n","import {todoListApi} from \"../../api/todo-list-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../app/app-reducer\";\r\nimport {\r\n    ChangeEntityStatusPayloadType,\r\n    ChangeTodoListFilterPayloadType,\r\n    ChangeTodoListTitleType,\r\n    TodoListDomainType, TodoListType\r\n} from \"./todo-list-types\";\r\nimport {ThunkError} from \"../../app/store\";\r\n\r\n\r\nexport const fetchTodoLists = createAsyncThunk<{todoLists: TodoListType[]}, void, ThunkError>(\r\n    'todoLists/fetchTodoLists',\r\n    async (_, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.getTodoLists()\r\n            thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n            return {todoLists: res.data}\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const deleteTodoList = createAsyncThunk<{todoListID: string}, string, ThunkError>(\r\n    'todoLists/deleteTodoList',\r\n    async (todoListID: string, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        thunkAPI.dispatch(changeEntityStatusAC({entityStatus: 'loading', todoListID}))\r\n        try{\r\n            await todoListApi.deleteTodoList(todoListID)\r\n            thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n            thunkAPI.dispatch(changeEntityStatusAC({entityStatus: 'idle', todoListID}))\r\n            return {todoListID: todoListID}\r\n        }catch (error){\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n\r\n    });\r\n\r\nexport const createTodoList = createAsyncThunk<{todoList: TodoListType},string, ThunkError >(\r\n    'todoLists/createTodoList',\r\n    async (todoListTitle: string, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.createTodoList(todoListTitle)\r\n            if (res.data.resultCode === 0) {\r\n                return {todoList: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const changeTodoListTitle = createAsyncThunk<ChangeTodoListTitleType, ChangeTodoListTitleType, ThunkError>(\r\n    'todoLists/changeTodoListTitle',\r\n    async (params: ChangeTodoListTitleType, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.updateTodoList(params.todoListID, params.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n                return {todoListID: params.todoListID, title: params.title}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const todoListSlice = createSlice({\r\n    name: 'todoList',\r\n    initialState: [] as TodoListDomainType[],\r\n    reducers: {\r\n        changeTodoListFilterAC: (state, action: PayloadAction<ChangeTodoListFilterPayloadType>) => {\r\n            return state.map(tl => tl.id === action.payload.id ?\r\n                {...tl, filter: action.payload.filter} : tl)\r\n        },\r\n        changeEntityStatusAC: (state, action: PayloadAction<ChangeEntityStatusPayloadType>) => {\r\n            return state.map(tl => tl.id === action.payload.todoListID ?\r\n                {...tl, entityStatus: action.payload.entityStatus} : tl)\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n                if (action.payload) return action.payload.todoLists.map(tl => ({\r\n                    ...tl,\r\n                    filter: \"all\",\r\n                    entityStatus: \"idle\"\r\n                }))\r\n            })\r\n            .addCase(createTodoList.fulfilled, (state, action) => {\r\n                if (action.payload) state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(deleteTodoList.fulfilled, (state, action) => {\r\n                state.splice(state.findIndex(tl => tl.id === action.payload.todoListID), 1)\r\n            })\r\n            .addCase(changeTodoListTitle.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    const index = state.findIndex(tl => {\r\n                        if (action.payload) return tl.id === action.payload.todoListID\r\n                    })\r\n                    state[index].title = action.payload.title\r\n                }\r\n            })\r\n    }\r\n});\r\n\r\nexport const asyncTodoListActions = {\r\n    fetchTodoLists,\r\n    createTodoList,\r\n    changeTodoListTitle,\r\n    deleteTodoList,\r\n}\r\nexport const {changeTodoListFilterAC, changeEntityStatusAC} = todoListSlice.actions\r\nexport const todoListReducer = todoListSlice.reducer","import {todoListApi} from \"../../../api/todo-list-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/app-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {changeAppStatus} from \"../../../app/app-reducer\";\r\nimport {asyncTodoListActions} from \"../todolist-reducer\";\r\nimport {AddTaskActionType, RemoveTaskActionType, TaskStateType, TaskType, UpdateTaskActionType} from \"./task-types\";\r\nimport {UpdateTaskRequestType} from \"../../../api/api-types\";\r\nimport {RootStateType, ThunkError} from \"../../../app/store\";\r\n\r\nexport const fetchTasks = createAsyncThunk<{todoListID: string, tasks: TaskType[]}, string, ThunkError>(\r\n    'tasks/fetchTasks',\r\n    async (todoListID: string, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.getTasks(todoListID)\r\n            const tasks: TaskType[] = res.data.items\r\n            thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n            return {todoListID, tasks}\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const removeTask = createAsyncThunk<RemoveTaskActionType, RemoveTaskActionType, ThunkError>(\r\n    'tasks/removeTask',\r\n    async (params: RemoveTaskActionType, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            await todoListApi.deleteTask(params.todoListID, params.taskID)\r\n            thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n            return {todoListID: params.todoListID, taskID: params.taskID}\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const addTask = createAsyncThunk<{task: TaskType, todoListID: string}, AddTaskActionType, ThunkError>(\r\n    'tasks/addTask',\r\n    async (params: AddTaskActionType, thunkAPI) => {\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.createTask(params.todoListID, params.taskTitle)\r\n            const task = res.data.data.item\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n                return {task, todoListID: params.todoListID}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error.message, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const updateTask = createAsyncThunk<UpdateTaskActionType, UpdateTaskActionType, ThunkError>(\r\n    'tasks/updateTask',\r\n    async (params: UpdateTaskActionType, thunkAPI) => {\r\n        const state = thunkAPI.getState() as RootStateType\r\n\r\n        const task = state.tasks[params.todoListID].find(t => t.id === params.taskID)\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue({errors: ['task not found in the state'], fieldsErrors: []})\r\n        }\r\n\r\n        const apiModel: UpdateTaskRequestType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...params.model\r\n        }\r\n        thunkAPI.dispatch(changeAppStatus(\"loading\"))\r\n        try {\r\n            const res = await todoListApi.updateTask(params.todoListID, params.taskID, apiModel)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(changeAppStatus(\"succeed\"))\r\n                return {todoListID: params.todoListID, taskID: params.taskID, model: params.model}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: []})\r\n        }\r\n    });\r\n\r\nexport const taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TaskStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                if (action.payload) return {...state, [action.payload.todoListID]: action.payload.tasks}\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                if (action.payload) return {\r\n                    ...state, [action.payload.todoListID]: state[action.payload.todoListID]\r\n                        .filter(task => {\r\n                            if (action.payload) {\r\n                                return task.id !== action.payload.taskID\r\n                            }\r\n                        })\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                if (action.payload) return {\r\n                    ...state,\r\n                    [action.payload.todoListID]: [action.payload.task, ...state[action.payload.todoListID]]\r\n                }\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                if(action.payload){\r\n                    const tasks = state[action.payload.todoListID]\r\n                    const index = tasks.findIndex(t => {\r\n                        if(action.payload) return  t.id === action.payload.taskID\r\n                    })\r\n                    if (index > -1 ) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.model}\r\n                    }\r\n                }\r\n            })\r\n            .addCase(asyncTodoListActions.createTodoList.fulfilled,\r\n                (state, action) => {\r\n                    if (action.payload) return {...state, [action.payload.todoList.id]: []}\r\n                })\r\n            .addCase(asyncTodoListActions.deleteTodoList.fulfilled,\r\n                (state, action) => {\r\n                    delete state[action.payload.todoListID]\r\n                })\r\n            .addCase(asyncTodoListActions.fetchTodoLists.fulfilled,\r\n                (state, action) => {\r\n                    if (action.payload) action.payload.todoLists.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n    }\r\n});\r\n\r\nexport const asyncTasksActions = {fetchTasks, removeTask, addTask, updateTask}\r\nexport const tasksReducer = taskSlice.reducer\r\nexport type TasksActionType = typeof taskSlice.actions\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {Task} from \"./Task\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../app/hooks\";\r\nimport {asyncTasksActions} from \"./tasks-reducer\";\r\nimport {FilterValuesType} from \"../todo-list-types\";\r\nimport {TaskStatuses} from \"./task-types\";\r\n\r\ntype TaskContainerPropsType = {\r\n    todoListID: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst TaskContainer: React.FC<TaskContainerPropsType> = (props) => {\r\n    console.log(\"task container\")\r\n\r\n    const allTasks = useAppSelector((state) => state.tasks)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncTasksActions.fetchTasks(props.todoListID))\r\n    }, [dispatch, props.todoListID])\r\n\r\n    let taskForTodoList = allTasks[props.todoListID];\r\n    if (props.filter === \"active\") {\r\n        taskForTodoList = taskForTodoList.filter(t => !t.status)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        taskForTodoList = taskForTodoList.filter(t => t.status)\r\n    }\r\n\r\n    const removeTaskCallback = useCallback((taskID: string) => {\r\n        dispatch(asyncTasksActions.removeTask({todoListID: props.todoListID, taskID}))\r\n    }, [dispatch, props.todoListID])\r\n\r\n    const changeStatusCallback = useCallback((taskID: string, status: TaskStatuses) => {\r\n        dispatch(asyncTasksActions.updateTask({todoListID: props.todoListID, taskID, model: {status}}))\r\n    }, [dispatch, props.todoListID])\r\n\r\n    const changeTaskTitleCallback = useCallback((taskID: string, taskTitle: string) => {\r\n        dispatch(asyncTasksActions.updateTask({todoListID: props.todoListID, taskID, model: {title: taskTitle}}))\r\n    }, [dispatch, props.todoListID])\r\n\r\n    const tasks = taskForTodoList.map(taskObj => {\r\n        return (\r\n            <Task\r\n                key={taskObj.id}\r\n                task={taskObj}\r\n                changeTaskTitle={changeTaskTitleCallback}\r\n                changeTaskStatus={changeStatusCallback}\r\n                deleteTask={removeTaskCallback}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {tasks}\r\n        </>\r\n    )\r\n}\r\nexport default TaskContainer","import React, {MouseEvent, useCallback} from 'react';\r\nimport '../../app/App.css'\r\nimport EditableSpan from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Button, Tooltip} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddCircle, Delete} from \"@material-ui/icons\";\r\nimport TaskContainer from \"./Task/TaskContainer\";\r\nimport {TodoListDomainType} from \"./todo-list-types\";\r\nimport {changeModalStatus} from \"../../utils/app-utils\";\r\nimport {useAppDispatch} from \"../../app/hooks\";\r\n\r\nexport type TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    disable: boolean\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (trigger: string | undefined, todoListID: string) => void;\r\n    changeTodoListTitle: (title: string, todoListID: string) => void;\r\n    addTaskForTodoList: (title: string, todoListID: string) => void;\r\n}\r\n\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = React.memo(props => {\r\n    console.log(\"todolist\")\r\n    const dispatch = useAppDispatch();\r\n\r\n    const {\r\n        todoList,\r\n        disable,\r\n        removeTodoList,\r\n        changeTodoListFilter,\r\n        changeTodoListTitle,\r\n    } = props\r\n\r\n    const changeFilter = useCallback((e: MouseEvent<HTMLButtonElement>) => {\r\n        changeTodoListFilter(e.currentTarget.dataset.filter, todoList.id)\r\n    }, [changeTodoListFilter, todoList.id])\r\n\r\n    const deleteTodoList = useCallback(() => {\r\n        removeTodoList(todoList.id)\r\n    }, [removeTodoList, todoList.id])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        changeTodoListTitle(title, todoList.id)\r\n    }, [changeTodoListTitle, todoList.id])\r\n\r\n    return <div>\r\n        <div>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={ props.todoList.title }\r\n                    changeItem={ changeTitle }\r\n                    disabled={disable}\r\n                />\r\n                <Tooltip title={`Delete List: ${todoList.title}`}>\r\n                    <IconButton onClick={ deleteTodoList } disabled={disable}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={\"Add Task\"}>\r\n                    <IconButton onClick={e => changeModalStatus(e, dispatch, todoList.id)}>\r\n                        <AddCircle\r\n                            fontSize={\"medium\"}\r\n                            color={'primary'}\r\n                            data-action={\"add-task\"}\r\n                        />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </h3>\r\n            <ul className={ \"list-style\" }>\r\n                <TaskContainer todoListID={ todoList.id } filter={ todoList.filter }/>\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    data-filter=\"all\"\r\n                    color={ todoList.filter === \"all\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>All\r\n                </Button>\r\n                <Button\r\n                    data-filter=\"active\"\r\n                    color={ todoList.filter === \"active\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>Active\r\n                </Button>\r\n                <Button\r\n                    data-filter=\"completed\"\r\n                    color={ todoList.filter === \"completed\" ? \"secondary\" : \"primary\" }\r\n                    variant={ \"outlined\" }\r\n                    size={ \"small\" }\r\n                    onClick={ changeFilter }>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default TodoList;","import React, {useCallback, useEffect} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Container, IconButton, Tooltip} from \"@material-ui/core\";\r\nimport {AddCircle} from \"@material-ui/icons\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TodoList from \"./TodoList\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {asyncTodoListActions, changeTodoListFilterAC} from \"./todolist-reducer\";\r\nimport {asyncTasksActions} from \"./Task/tasks-reducer\";\r\nimport {changeModalStatus} from \"../../utils/app-utils\";\r\n\r\n\r\nconst TodoListContainer = React.memo(() => {\r\n    console.log(\"todo list container\")\r\n    const todoLists = useAppSelector((state) => state.todoLists)\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(asyncTodoListActions.fetchTodoLists())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const changeTodoListFilterCallback = useCallback((trigger: string | undefined, todoListID: string) => {\r\n        switch (trigger) {\r\n            case \"all\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"all\", id:todoListID}))\r\n            case \"active\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"active\", id:todoListID}))\r\n            case \"completed\":\r\n                return dispatch(changeTodoListFilterAC({filter: \"completed\", id:todoListID}))\r\n            default:\r\n                return dispatch(changeTodoListFilterAC({filter: \"all\", id:todoListID}))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitleCallback = useCallback((title: string, todoListID: string) => {\r\n        dispatch(asyncTodoListActions.changeTodoListTitle({title, todoListID}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoListCallback = useCallback((todoListID: string) => {\r\n        dispatch(asyncTodoListActions.deleteTodoList(todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTaskForTodoListCallback = useCallback((taskTitle: string, todoListID: string) => {\r\n        dispatch(asyncTasksActions.addTask({todoListID, taskTitle}))\r\n    }, [dispatch])\r\n\r\n    const content = todoLists.map(tl => {\r\n        const disable = tl.entityStatus === \"loading\"\r\n        return (\r\n            <Grid item key={ tl.id }>\r\n                <Paper elevation={ 10 } style={ {padding: \"10px\"} }>\r\n                    <TodoList\r\n                        todoList={tl}\r\n                        disable={disable}\r\n                        changeTodoListFilter={ changeTodoListFilterCallback }\r\n                        addTaskForTodoList={ addTaskForTodoListCallback }\r\n                        changeTodoListTitle={ changeTodoListTitleCallback }\r\n                        removeTodoList={ removeTodoListCallback }\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container fixed={ true }>\r\n            <Grid container style={ {margin: \"20px 0px\"} }>\r\n                <Tooltip title={\"Add List\"}>\r\n                    <IconButton onClick={e => changeModalStatus(e, dispatch)}>\r\n                        <AddCircle\r\n                            fontSize={\"large\"}\r\n                            color={'primary'}\r\n                            data-action={\"add-list\"}\r\n                        />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container spacing={ 2 }>\r\n                { content }\r\n            </Grid>\r\n        </Container>\r\n    )\r\n})\r\nexport default TodoListContainer","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {LoginParamsType} from \"../../api/api-types\";\r\nimport {asyncAuthActions, login} from \"./auth-reducer\";\r\nimport {useAppDispatch} from \"../../app/hooks\";\r\n\r\ntype LoginPropsType = {\r\n    loginHandler: (loginData: LoginParamsType) => void\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo(props => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {\r\n        loginHandler,\r\n    } = props\r\n\r\n    const validate = (values: LoginParamsType) => {\r\n        const errors: LoginParamsType = {};\r\n        if (!values.email) {\r\n            errors.email = 'Enter your email';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Enter valid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Enter password';\r\n        } else if (values.password.length <= 2) {\r\n            errors.password = 'Password must be more then 2 characters';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values, formikHelpers:FormikHelpers<LoginParamsType>) => {\r\n            const action = await dispatch(asyncAuthActions.login(values))\r\n            console.log(action)\r\n            if(login.rejected.match(action)){\r\n                if(action.payload?.fieldsErrors?.length){\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <Grid container justifyContent=\"center\">\r\n            <Grid item xs={ 4 }>\r\n                <form onSubmit={ formik.handleSubmit }>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={ 'https://social-networ.samuraijs.com/' }\r\n                                   target={ '_blank' } rel=\"noopener noreferrer\">here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                { ...formik.getFieldProps(\"email\") }\r\n                            />\r\n                            { formik.touched.email && formik.errors.email ?\r\n                                <div style={ {color: 'red'} }>{ formik.errors.email }</div> : null }\r\n\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                { ...formik.getFieldProps(\"password\") }\r\n                            />\r\n\r\n                            { formik.touched.password && formik.errors.password ?\r\n                                <div style={ {color: 'red'} }>{ formik.errors.password }</div> : null }\r\n\r\n                            <FormControlLabel\r\n                                label={ 'Remember me' }\r\n                                control={ <Checkbox\r\n                                    { ...formik.getFieldProps(\"rememberMe\") }\r\n                                    checked={ formik.values.rememberMe }\r\n                                /> }\r\n                            />\r\n                            <Button type={ 'submit' } variant={ 'contained' } color={ 'primary' }>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {Login} from \"./Login\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {asyncAuthActions, login} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/api-types\";\r\n\r\n\r\nexport const LoginContainer: React.FC = React.memo(() => {\r\n\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch();\r\n\r\n    const loginHandler = useCallback(async (loginData: LoginParamsType) => {\r\n        const action = await dispatch(asyncAuthActions.login(loginData))\r\n        if(login.rejected.match(action)){\r\n            if(action.payload?.fieldsErrors?.length){\r\n                return action.payload.fieldsErrors\r\n            }\r\n        }\r\n    }, [dispatch])\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Login loginHandler={loginHandler}/>\r\n})","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport TodoListContainer from \"./TodoList/TodoListContainer\";\r\nimport {LoginContainer} from \"./Login/LoginContainer\";\r\n\r\n\r\nexport const PATH = {\r\n    TODO_LIST: \"/\",\r\n    LOGIN: \"/login\",\r\n    ERROR_404: '/404'\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={PATH.TODO_LIST} render={() => <TodoListContainer/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.ERROR_404} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={PATH.ERROR_404}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}","import {styled} from \"@material-ui/styles\";\r\n\r\n\r\nexport const BtnContainer = styled('div')(() => ({\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexFlow: 'row wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-around',\r\n    marginTop: '10px'\r\n}));","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {BtnContainer} from \"../../utils/styles-util\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    handleClose: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropsType> = React.memo(props => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const addItemTitle = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItemTitle()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                label={\"Title\"}\r\n                variant={\"standard\"}\r\n                error={error}\r\n                disabled={props.disabled}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                onBlur={() => setError(false)}\r\n            />\r\n            {error && <div className={\"error-message\"}>{\"Title is required!\"}</div>}\r\n            <BtnContainer>\r\n                <div>\r\n                    <Button variant=\"text\" color=\"error\" onClick={props.handleClose}>Cancel</Button>\r\n                </div>\r\n                <div>\r\n                    <Button variant=\"text\" onClick={addItemTitle}>Save</Button>\r\n                </div>\r\n            </BtnContainer>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm\r\n","import React, {FC, memo} from 'react';\r\nimport style from './ModalWindow.module.scss'\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Close} from \"@material-ui/icons\";\r\n\r\n\r\ntype ModalWindowType = {\r\n    title: string | null\r\n    addTitle: (title: string) => void\r\n    handleClose: () => void\r\n}\r\n\r\nexport const ModalWindow: FC<ModalWindowType> = memo(props => {\r\n    const {\r\n        title,\r\n        addTitle,\r\n        handleClose\r\n    } = props\r\n\r\n    return <div className={style.container}>\r\n        <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item xs={10}>\r\n                <Typography variant=\"h5\">\r\n                    {title}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <IconButton onClick={handleClose}>\r\n                    <Close fontSize={\"medium\"} color={\"error\"}/>\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid>\r\n        <AddItemForm addItem={addTitle} handleClose={handleClose}/>\r\n    </div>\r\n})","import React, {FC, memo, useCallback} from 'react';\r\nimport {Dialog, Paper} from \"@material-ui/core\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {ModalWindow} from \"./ModalWindow\";\r\nimport {createTodoList} from \"../../features/TodoList/todolist-reducer\";\r\nimport {addTask} from \"../../features/TodoList/Task/tasks-reducer\";\r\nimport {setModalStatus} from \"../../app/app-reducer\";\r\n\r\n\r\nexport const ModalContainer: FC = memo(() => {\r\n\r\n    const modal = useAppSelector((state) => state.app.modal)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClose = () => {\r\n        dispatch(setModalStatus({modalStatus: \"no-status\", isOpen: false, modalTitle: null}))\r\n    }\r\n\r\n    const addTitleHandler = useCallback((title: string) => {\r\n        debugger\r\n        if(modal.modalStatus === 'add-list') dispatch(createTodoList(title))\r\n\r\n        if(modal.modalStatus === 'add-task'){\r\n            modal.itemID && dispatch(addTask({todoListID: modal.itemID, taskTitle: title}))\r\n        }\r\n        dispatch(setModalStatus({modalStatus: \"no-status\", isOpen: false, modalTitle: null}))\r\n    }, [dispatch, modal.itemID, modal.modalStatus])\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={modal.isOpen}\r\n                onClose={handleClose}\r\n            >\r\n                <Paper>\r\n                    <ModalWindow\r\n                        title={modal.modalTitle && modal.modalTitle}\r\n                        handleClose={handleClose}\r\n                        addTitle={addTitleHandler}\r\n                    />\r\n                </Paper>\r\n            </Dialog>\r\n        </>\r\n    )\r\n});","import React, {useEffect} from 'react';\r\nimport HeaderContainer from \"../features/Header/HeaderContainer\";\r\nimport ErrorSnackbarContainer from \"../components/ErrorSnackbar/ErroSnackbarContainer\";\r\nimport {Routes} from \"../features/Routes\";\r\nimport {useAppDispatch, useAppSelector} from \"./hooks\";\r\nimport {initializedApp} from \"./app-reducer\";\r\nimport {ModalContainer} from \"../components/Modal/ModalContainer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const App: React.FC = () => {\r\n    console.log(\"app\")\r\n    const isInitialized = useAppSelector((state) => state.app.isInitialized)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedApp())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <HeaderContainer/>\r\n            <Routes/>\r\n            <ErrorSnackbarContainer/>\r\n            <ModalContainer/>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import {Action, configureStore, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {todoListReducer} from \"../features/TodoList/todolist-reducer\";\r\nimport {tasksReducer} from \"../features/TodoList/Task/tasks-reducer\";\r\nimport {FieldErrorType} from \"../api/api-types\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [thunkMiddleware] as const\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\nexport type ThunkAppDispatch = ThunkDispatch<RootStateType, void, Action>;\r\nexport type ThunkError = { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {App} from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}